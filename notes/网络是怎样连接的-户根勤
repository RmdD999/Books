第一章 - Web 浏览器
下列说法是正确的（√）还是错误的？

1. http://www.nikkeibp.co.jp/ 中的 www 代表 World Wide Web 协
议（对通信操作规则所作的定义）。 （√）
Answer: ×。http://www.nikkeibp.co.jp/ 中的 www 只是 Web 服务器上
        的一种命名。而且，World Wide Web 也不是一个协议的名字，
        而是 Web 的提出者最早开发的浏览器兼 HTML 编辑器的
        名字。

2. 个人也可以申请注册互联网中的域名。 （√）
Answer:
        √。 如 果 是“.com”“.net”“.org”“.jp”（除“co.jp”“ne.jp”
        等“xx.jp”格式的域名外）A 等没有对注册对象范围进行限制
        的域名，任何个人都可以申请注册。此外，也有一种“.name”
        域名是专门为个人申请者准备的。

3. 浏览器等网络应用程序实际上并不具备网络控制功能。 
Answer: 
        √。应用程序并不是自己去控制网络，而是委托操作系统来控
        制网络。        

1.1 生成HTTP请求消息
URL = Uniform Resource Locator
FTP = File Transfer Protocol
http->Web 服务器
ftp: ->FTP服务器

1.1.2 浏览器要先解析URL
(a) URL的元素
http: + // + Web Server name+ / + 目录名 + / + ... + 文件名
e.g. http://www.lab.glasscom.com/dir1/file1.html

1.1.3 省略文件名的情况

（a）http://www.lab.glasscom.com/dir/

我们可以这样理解，以“/”结尾代表 /dir/ 后面本来应该有的文件名被
省略了。根据 URL 的规则，文件名可以像前面这样省略 -->default file name
　“/”目录表示目录层级中最顶层的“根目录”。
浏览器的第一步工作就是对 URL 进行解析。

1.1.4 HTTP的基本思路

（浏览器）客户端--请求消息（方法，URI）-->服务器（web服务器）
（浏览器）客户端--相应消息（状态码）-->服务器（web服务器）

URI =   URI 的内容是一个存放网页
        数据的文件名或者是一个 CGI 程序 B 的文件名，例如“/dir1/file1.html” “/dir1/program1.cgi”等.
        也可以直接使用“http:”
        开头的 URLD 来作为 URI。换句话说就是，这里可以写各种访问目标，而
        这些访问目标统称为 URI。

HTTP 的主要方法：
                GET ○ ○ 获取 URI 指定的信息。如果 URI 指定的是文件，则
                        返回文件的内容；如果 URI 指定的是 CGI 程序，则
                        返回该程序的输出数据
                POST ○ ○从客户端向服务器发送数据。一般用于发送表单中
                        填写的数据等情况下
                HEAD ○ ○ 和 GET 基本相同。不过它只返回 HTTP 的消息头
                        （message header），而并不返回数据的内容。用于
                        获取文件最后更新时间等属性信息
                OPTIONS ○ 用于通知或查询通信选项
                PUT △ ○ 替换 URI 指定的服务器上的文件。如果 URI 指定的
                         文件不存在，则创建该文件
                DELETE △ ○ 删除 URI 指定的服务器上的文件
                TRACE ○ 将服务器收到的请求行和头部（header）直接返回
                        给客户端。用于在使用代理的环境中检查改写请求
                        的情况
                CONNECT ○ 使用代理传输加密消息时使用的方法

1.1.5 生成HTTP
a) 请求消息
<方法><空格><URI><空格><HTTP版本>     第一行称为请求行，通过这一行可以大致了解请求的内容
<字段名>：<字段值>      这一部分称为消息头，每行包含一个头字段，用于表示请求的附加信息。消息头的行数根据具体情况可变，一直延伸到空行为止
...
...
...
<空行>
<消息体>   Message Body,包含客户端向服务器发送的数据，例如用POST向web服务器发送网页表单数据

b)相应消息
<HTTP版本><空格><状态码><空格><相应短语>
<字段名>：<字段值>
...
...
...
<空行>
<消息体>   消息体包含服务器向客户端发送的数据，例如从文件中读取的数据，或者CGI应用程序输出的数据等。消息体的内容作为二进
制数据来处理①


GET 方法能够发送的数据只有几百个字节，如果表单中的数据超过这一长
度，则必须使用 POST 方法来发送。

HTTP中主要的头字段
Date ○ ○ 表示请求和响应生成的日期
Pragma ○ ○ 表示数据是否允许缓存的通信选项
Cache-Control ○ 控制缓存的相关信息
Connection ○ 设置发送响应之后 TCP 连接是否继续保持的通信选项
Transfer-Encoding ○ 表示消息主体的编码格式
Via ○ 记录途中经过的代理和网关
Authorization ○ ○ 身份认证数据
From ○ ○ 请求发送者的邮件地址
If-Modified-Since ○ ○ 如果希望仅当数据在某个日期之后有更新时才执
行请求，可以在这个字段指定希望的日期。一般
来说，这个功能的用途在于判断客户端缓存的数
据是否已经过期，如果已经过期则获取新的数据
Referer ○ ○ 当通过点击超级链接进入下一个页面时，在这里
会记录下上一个页面的 URI
User-Agent ○ ○ 客户端软件的名称和版本号等相关信息
Accept △ ○ 客 户 端 可 支 持 的 数 据 类 型（Content-Type）， 以
MIME 类型来表示
Accept-Charset △ ○ 客户端可支持的字符集
Accept-Encoding △ ○ 客户端可支持的编码格式（Content-Encoding）一般来说表示数据的压缩格式
Accept-Language △ ○ 客户端可支持的语言，汉语为 zh，英语为 en
Host ○ 接收请求的服务器 IP 地址和端口号
If-Match ○ 参见 Etag
If-None-Match ○ 参见 Etag
If-Unmodified-Since ○ 当指定日期之后数据未更新时执行请求
Range ○ 当需要只获取部分数据而不是全部数据时，可通
过这个字段指定要获取的数据范围

响应头：用于表示响应消息的附加信息的头字段
Location ○ ○ 表示信息的准确位置。当请求的 URI 为相对路径
时，这个字段用来返回绝对路径
Server ○ ○ 服务器程序的名称和版本号等相关信息
WWW-Authenticate ○ ○ 当请求的信息存在访问控制时，返回身份认证用
的数据（Challenge ①）
Accept-Ranges ○ 当希望仅请求部分数据（使用 Range 来指定范围）
时，服务器会告知客户端是否支持这一功能

实体头：用于表示实体（消息体）的附加信息的头字段
Allow ○ ○ 表示指定的 URI 支持的方法
Content-Encoding ○ ○ 当消息体经过压缩等编码处理时，表示其编码格式
Content-Length ○ ○ 表示消息体的长度
Content-Type ○ ○ 表示消息体的数据类型，以 MIME 规格定义的数
据类型来表示
Expires ○ ○ 表示消息体的有效期
Last-Modified ○ ○ 数据的最后更新日期
Content-Language ○ 表示消息体的语言。汉语为 zh，英语为 en
Content-Location ○ 表示消息体在服务器上的位置（URI）
Content-Range ○ 当仅请求部分数据时，表示消息体包含的数据范围
Etag ○ 在更新操作中，有时候需要基于上一次请求的响应
数据来发送下一次请求。在这种情况下，这个字段
可以用来提供上次响应与下次请求之间的关联信息。
上次响应中，服务器会通过 Etag 向客户端发送一
个唯一标识，在下次请求中客户端可以通过 IfMatch、If-None-Match、If-Range 字段将这个标识
告知服务器，这样服务器就知道该请求和上次的响
应是相关的。这个字段的功能和 Cookie 是相同的，
但 Cookie 是网景（Netscape）公司自行开发的规格，
而 Etag 是将其进行标准化后的规格

1.1.6 发送请求后会收到响应

HTTP 状态码概要
 状态码的第一位数字表示状态类型，第二、三位数字表示具体的情况。下表列举了
第一位数字的含义。

状态码 含　　义
1xx 告知请求的处理进度和情况
2xx 成功
3xx 表示需要进一步操作
4xx 客户端错误
5xx 服务器错误

由于每条请求消息中只能写 1 个 URI，所以每次只能获取 1 个文件，
如果需要获取多个文件，必须对每个文件单独发送 1 条请求。比如 1 个
网页中包含 3 张图片，那么获取网页加上获取图片，一共需要向 Web 服务
器发送 4 条请求。

1.2 向 DNS 服务器查询 Web 服务器的 IP 地址

1.2.1　IP 地址的基本知识

根据域名查IP地址

(a) IP地址主体的表示方法
10.11.12.13

(b) 采用与IP地址主体相同的格式表示子网掩码的方法
10.11.12.13/255.255.255.0
IP地址主题/子网掩码

(c) 采用网络号比特数来表示子网掩码的方法
10.11.12.13/24
IP地址主体/子网掩码

(d) 表示子网的地址
10.11.12.0/24 --> 主机号部分的比特全部为0，这个地址表示的不是单独的一台计算机，而是代表整个子网

(e) 表示子网内广播的地址
10.11.12.255/24 --> 主机号部分的比特全部为1，这个地址表示的对整个子网的进行广播

1) IP地址 10.1.2.3 -->00001010.00000001.00000010.00000011
2) 子网掩码 255.255.255.0 --> 11111111.11111111.11111111.00000000
网络号 10.1.2 --> 00001010.00000001.00000010
主机号 3 ---> 00000011

IP 地址的主机号
全 0：表示整个子网
全 1：表示向子网上所有设备发送包，即“广播”

1.2.2 域名和 IP 地址并用的理由

现在我们使用的方案是让人来使用名称，让路由器来使用 IP 地 址。为了填补两者之间的障碍，需要有一个机制能够通过名称来查询 IP 地 址，或者通过 IP 地址来查询名称，这样就能够在人和机器双方都不做出牺
牲的前提下完美地解决问题。这个机制就是 DNS

DNS：Domain Name System，域名服务系统。将服务器名称和 IP 地址进行
关联是 DNS 最常见的用法，但 DNS 的功能并不仅限于此，它还可以将邮
件地址和邮件服务器进行关联，以及为各种信息关联相应的名称。

1.2.3 　Socket 库提供查询 IP 地址的功能

Socket 库中包含很多用于发送和接收数据的程序组件

1.2.4 通过解析器向 DNS 服务器发出查询

解析器的程序名称“gethostbyname”以及 Web 服务器
的域名“www.lab.glasscom.com”就可以了，这样就完成了对解析器的调用 B。
<内存地址> = gethostbyname("www.lab.glasscom.com")
gethostbyname = 解析器的程序名
www.lab.glasscom.com = 要查询的服务器的域名

调用解析器后，解析器会向 DNS 服务器发送查询消息，然后 DNS 服
务器会返回响应消息。响应消息中包含查询到的 IP 地址，解析器会取出 IP
地址，并将其写入浏览器指定的内存地址中。

根据域名查询 IP 地址时，浏览器会使用 Socket 库中的解析器

1.2.5 解析器的内部原理

由于调用了其他程序，原本运行的程序进
入暂停状态，而被调用的程序开始运行，这就是“控制流程转移”。



1.3 全世界 DNS 服务器的大接力
1.3.1 DNS 服务器的基本工作

DNS 服务器的基本工作就是接收来自客户端的查询消
息，然后根据消息的内容返回响应。
（a）域名
服务器、邮件服务器（邮件地址中 @ 后面的部分）的名称
（b） Class
在最早设计 DNS 方案时，DNS 在互联网以外的其他网络中的应用
也被考虑到了，而 Class 就是用来识别网络的信息。不过，如今除了
互联网并没有其他的网络了，因此 Class 的值永远是代表互联网的 IN
（c）记录类型
表示域名对应何种类型的记录。例如，当类型为 A 时，表示域名
对应的是 IP 地址；当类型为 MX 时，表示域名对应的是邮件服务
器。对于不同的记录类型，服务器向客户端返回的信息也会不同

查询 www.lab.glasscom.com 这个域名对应的 IP 地址
（a）域名 = www.lab.glasscom.com
（b） Class = IN
（c）记录类型 = A

A 是 Address 的缩写。
MX：Mail eXchange，邮件交换。

DNS 服务器会从域名与 IP 地址的对照表中查找相应的记录，并
返回 IP 地址。

1.3.2 域名的层次结构
比如 www.lab.glasscom.com 这个域名如果按照公司
里的组织结构来说，大概就是“com 事业集团 glasscom 部 lab 科的 www”
这样。其中，相当于一个层级的部分称为域。因此，com 域的下一层是
glasscom 域，再下一层是 lab 域，再下面才是 www 这个名字。

1.3.3 寻找相应的DNS服务器并获取IP地址

根域 DNS 服务器在运营上使用多台服务器来对应一个 IP 地址，因此尽管
IP 地址只有 13 个，但其实服务器的数量是很多的。

客户端计算机从根域开始询问，然后一层一层排查获取IP地址

1.3.4 通过缓存加快DNS 服务器的相应

有时候并不需要从最上级的根域开始查找，因为 DNS 服务器有一
个缓存 A 功能，可以记住之前查询过的域名。如果要查询的域名和相关信息已
经在缓存中，那么就可以直接返回响应，接下来的查询可以从缓存的位置开
始向下进行。相比每次都从根域找起来说，缓存可以减少查询所需的时间。
并且，当要查询的域名不存在时，“不存在”这一响应结果也会被缓
存。这样，当下次查询这个不存在的域名时，也可以快速响应。

DNS 服务器中保存的信息都设置有一个有效期，当缓存中的信息超过有效期后，数
据就会从缓存中删除。而且，在对查询进行响应时，DNS 服务器也会告知客
户端这一响应的结果是来自缓存中还是来自负责管理该域名的 DNS 服务器。


1.4 委托协议栈发送消息
1.4.1 数据收发操作概览

向操作系统内部的协议栈发出委托时，需要按照指定的顺序来调
用 Socket 库中的程序组件

通过 DNS 服务器查询 IP 地址的操作也同样适用于所有网络应用程序。

服务器程序 --> 协议栈（TCP）-->客户端程序
客户端程序 --> 协议栈（TCP）-->客户端程序

服务器一端创建套接字-->服务器进入等待状态-->客户端连接管道

（1）创建套接字（创建套接字阶段）
（2）将管道连接到服务器端的套接字上（连接阶段）
（3）收发数据（通信阶段）
（4）断开管道并删除套接字（断开阶段）

1.4.2 创建套接字阶段
　书中出现了 Socket、socket、套接字（英文也是 socket）等看起来非常容易
混淆的词，其中小写的 socket 表示程序组件的名称，大写字母开头的
Socket 表示库，而汉字的“套接字”则表示管道两端的接口。

描述符识别特定的套接字socket
应用程序是通过“描述符”这一类似号码牌的东西来识别套接字的。

1.4.3 连接阶段：把管道接上去

第 1 个参数，即描述符，就是在创建套接字的时候由协议栈返回的那
个描述符。connect 会将应用程序指定的描述符告知协议栈，然后协议栈根
据这个描述符来判断到底使用哪一个套接字去和服务器端的套接字进行连
接，并执行连接的操作

第 2 个参数，即服务器 IP 地址，就是通过 DNS 服务器查询得到的我
们要访问的服务器的 IP 地址。在 DNS 服务器的部分已经讲过，在进行数
据收发操作时，双方必须知道对方的 IP 地址并告知协议栈。这个参数就是
那个 IP 地址了。

第 3 个参数，即端口号，这个需要稍微解释一下。可能大家会觉得，
IP 地址就像电话号码，只要知道了电话号码不就可以联系到对方了吗？其 实，网络通信和电话还是有区别的，我们先来看一看 IP 地址到底能用来干
什么。IP 地址是为了区分网络中的各个计算机而分配的数值 B。因此，只要
知道了 IP 地址，我们就可以识别出网络上的某台计算机。但是，连接操作
的对象是某个具体的套接字，因此必须要识别到具体的套接字才行，而仅
凭 IP 地址是无法做到这一点的。

准确地说，IP 地址不是分配给每一台设备的，而是分配给设备中安装的网
络硬件的。因此，如果一台设备中安装了多个网络硬件，那么就会有多个
IP 地址。

　端口号的规则是全球统一的，为了避免重复和冲突，端口号和 IP 地址一样
都是由 IANA（Internet Assigned Number Authority，互联网编号管理局）这
一组织来统一管理的。
描述符：应用程序用来识别套接字的机制
IP 地址和端口号：客户端和服务器之间用来识别对方套接字的机制

1.4.4 通信阶段：传递消息

用户输入的
网址生成的 HTTP 请求消息 -->  write
套接字中已经保存了已连接的通信对象的相关信息，所以
只要通过描述符指定套接字，就可以识别出通信对象，并向其发送数据。

1.4.5 断开阶段：收发数据结束
当浏览器收到数据之后，收发数据的过程就结束了。接下来，我们需
要调用 Socket 库的 close 程序组件进入断开阶段
最终，连接在套接字之间的管道会被断开，套接字本身也会被删除


2. 用电信号传输 TCP/IP 数据
--探索协议栈和网卡

下列说法是正确的（√）还是错误的（×）？
1. 我们现在使用的以太网中存在不符合国际标准（IEEE802.3/802.2）
的部分。

√。一般情况下，以太网的头部（网络包开头的控制信息）格
式并非遵循国际标准（IEEE802.3/802.2），而是遵循一个更古
老的规格（以太网第 2 版，又称 DIX 规格），相对地，国际标
准（IEEE802.3/802.2）的头部格式由于长度太长、效率降低
而没有普及。

2. TCP/IP 是由 TCP 和 IP 两个协议的名字组合而成的，最开始
这两个协议是合在一起的。

√。最早的 TCP/IP 协议原型设计相当于现在的 TCP 和 IP 合
在一起的样子，后来才拆分成为 TCP 和 IP 两个协议。


3. 网络包通信技术是 20 世纪 60 年代为用计算机进行数据通信而
设计出来的。

√。在网络包出现之前，通信都是像电话一样把线路连接起来
进行的。但是，连接线路的通信方式只能和固定的对象进行通
信，无法发挥计算机可以处理多种工作的特点。为了解决这个
问题，人们设计出了使用网络包来进行通信的方式。

2.1 创建套接字

TCP = Transmission Control Protocol
ICMP = Internet Control Message Protocol
UDP = User Datagram Protocol
ARP = Address Resolution Protocol
IP = Internet Protocol

网络应用程序 --> 操作系统(负责用 TCP 协议收发数据的部分和负责用 UDP 协议收发数据的部分)
**像浏览器、邮件等一般的应用程序都是使用 TCP 收发数据的，而像 DNS 查询
等收发较短的控制数据的时候则使用 UDP。

浏览器、邮件等一般应用程序收发数据时用 TCP；
DNS 查询等收发较短的控制数据时用 UDP

ICMP 用于告知网络包传送过程中产生的错误以及各种控制消息，ARP 用
于根据 IP 地址查询相应的以太网 MAC 地址

2.1.2 套接字的实体就是通信控制信息

协议栈是根据套接字中记录的控制信息来工作的。

PID：Process ID（进程标识符）的缩写，是操作系统为了标识程序而分配的
编号，使用任务管理器可以查询所对应的程序名称。

2.1.3 调用socket时的操作

创建套接字时，首先分配一个套接字所需的内存空间，然后向其
中写入初始状态。