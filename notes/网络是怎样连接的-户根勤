第一章 - Web 浏览器
下列说法是正确的（√）还是错误的？

1. http://www.nikkeibp.co.jp/ 中的 www 代表 World Wide Web 协
议（对通信操作规则所作的定义）。 （√）
Answer: ×。http://www.nikkeibp.co.jp/ 中的 www 只是 Web 服务器上
        的一种命名。而且，World Wide Web 也不是一个协议的名字，
        而是 Web 的提出者最早开发的浏览器兼 HTML 编辑器的
        名字。

2. 个人也可以申请注册互联网中的域名。 （√）
Answer:
        √。 如 果 是“.com”“.net”“.org”“.jp”（除“co.jp”“ne.jp”
        等“xx.jp”格式的域名外）A 等没有对注册对象范围进行限制
        的域名，任何个人都可以申请注册。此外，也有一种“.name”
        域名是专门为个人申请者准备的。

3. 浏览器等网络应用程序实际上并不具备网络控制功能。 
Answer: 
        √。应用程序并不是自己去控制网络，而是委托操作系统来控
        制网络。        

1.1 生成HTTP请求消息
URL = Uniform Resource Locator
FTP = File Transfer Protocol
http->Web 服务器
ftp: ->FTP服务器

1.1.2 浏览器要先解析URL
(a) URL的元素
http: + // + Web Server name+ / + 目录名 + / + ... + 文件名
e.g. http://www.lab.glasscom.com/dir1/file1.html

1.1.3 省略文件名的情况

（a）http://www.lab.glasscom.com/dir/

我们可以这样理解，以“/”结尾代表 /dir/ 后面本来应该有的文件名被
省略了。根据 URL 的规则，文件名可以像前面这样省略 -->default file name
　“/”目录表示目录层级中最顶层的“根目录”。
浏览器的第一步工作就是对 URL 进行解析。

1.1.4 HTTP的基本思路

（浏览器）客户端--请求消息（方法，URI）-->服务器（web服务器）
（浏览器）客户端--相应消息（状态码）-->服务器（web服务器）

URI =   URI 的内容是一个存放网页
        数据的文件名或者是一个 CGI 程序 B 的文件名，例如“/dir1/file1.html” “/dir1/program1.cgi”等.
        也可以直接使用“http:”
        开头的 URLD 来作为 URI。换句话说就是，这里可以写各种访问目标，而
        这些访问目标统称为 URI。

HTTP 的主要方法：
                GET ○ ○ 获取 URI 指定的信息。如果 URI 指定的是文件，则
                        返回文件的内容；如果 URI 指定的是 CGI 程序，则
                        返回该程序的输出数据
                POST ○ ○从客户端向服务器发送数据。一般用于发送表单中
                        填写的数据等情况下
                HEAD ○ ○ 和 GET 基本相同。不过它只返回 HTTP 的消息头
                        （message header），而并不返回数据的内容。用于
                        获取文件最后更新时间等属性信息
                OPTIONS ○ 用于通知或查询通信选项
                PUT △ ○ 替换 URI 指定的服务器上的文件。如果 URI 指定的
                         文件不存在，则创建该文件
                DELETE △ ○ 删除 URI 指定的服务器上的文件
                TRACE ○ 将服务器收到的请求行和头部（header）直接返回
                        给客户端。用于在使用代理的环境中检查改写请求
                        的情况
                CONNECT ○ 使用代理传输加密消息时使用的方法

1.1.5 生成HTTP
a) 请求消息
<方法><空格><URI><空格><HTTP版本>     第一行称为请求行，通过这一行可以大致了解请求的内容
<字段名>：<字段值>      这一部分称为消息头，每行包含一个头字段，用于表示请求的附加信息。消息头的行数根据具体情况可变，一直延伸到空行为止
...
...
...
<空行>
<消息体>   Message Body,包含客户端向服务器发送的数据，例如用POST向web服务器发送网页表单数据

b)相应消息
<HTTP版本><空格><状态码><空格><相应短语>
<字段名>：<字段值>
...
...
...
<空行>
<消息体>   消息体包含服务器向客户端发送的数据，例如从文件中读取的数据，或者CGI应用程序输出的数据等。消息体的内容作为二进
制数据来处理①


GET 方法能够发送的数据只有几百个字节，如果表单中的数据超过这一长
度，则必须使用 POST 方法来发送。

HTTP中主要的头字段
Date ○ ○ 表示请求和响应生成的日期
Pragma ○ ○ 表示数据是否允许缓存的通信选项
Cache-Control ○ 控制缓存的相关信息
Connection ○ 设置发送响应之后 TCP 连接是否继续保持的通信选项
Transfer-Encoding ○ 表示消息主体的编码格式
Via ○ 记录途中经过的代理和网关
Authorization ○ ○ 身份认证数据
From ○ ○ 请求发送者的邮件地址
If-Modified-Since ○ ○ 如果希望仅当数据在某个日期之后有更新时才执
行请求，可以在这个字段指定希望的日期。一般
来说，这个功能的用途在于判断客户端缓存的数
据是否已经过期，如果已经过期则获取新的数据
Referer ○ ○ 当通过点击超级链接进入下一个页面时，在这里
会记录下上一个页面的 URI
User-Agent ○ ○ 客户端软件的名称和版本号等相关信息
Accept △ ○ 客 户 端 可 支 持 的 数 据 类 型（Content-Type）， 以
MIME 类型来表示
Accept-Charset △ ○ 客户端可支持的字符集
Accept-Encoding △ ○ 客户端可支持的编码格式（Content-Encoding）一般来说表示数据的压缩格式
Accept-Language △ ○ 客户端可支持的语言，汉语为 zh，英语为 en
Host ○ 接收请求的服务器 IP 地址和端口号
If-Match ○ 参见 Etag
If-None-Match ○ 参见 Etag
If-Unmodified-Since ○ 当指定日期之后数据未更新时执行请求
Range ○ 当需要只获取部分数据而不是全部数据时，可通
过这个字段指定要获取的数据范围

响应头：用于表示响应消息的附加信息的头字段
Location ○ ○ 表示信息的准确位置。当请求的 URI 为相对路径
时，这个字段用来返回绝对路径
Server ○ ○ 服务器程序的名称和版本号等相关信息
WWW-Authenticate ○ ○ 当请求的信息存在访问控制时，返回身份认证用
的数据（Challenge ①）
Accept-Ranges ○ 当希望仅请求部分数据（使用 Range 来指定范围）
时，服务器会告知客户端是否支持这一功能

实体头：用于表示实体（消息体）的附加信息的头字段
Allow ○ ○ 表示指定的 URI 支持的方法
Content-Encoding ○ ○ 当消息体经过压缩等编码处理时，表示其编码格式
Content-Length ○ ○ 表示消息体的长度
Content-Type ○ ○ 表示消息体的数据类型，以 MIME 规格定义的数
据类型来表示
Expires ○ ○ 表示消息体的有效期
Last-Modified ○ ○ 数据的最后更新日期
Content-Language ○ 表示消息体的语言。汉语为 zh，英语为 en
Content-Location ○ 表示消息体在服务器上的位置（URI）
Content-Range ○ 当仅请求部分数据时，表示消息体包含的数据范围
Etag ○ 在更新操作中，有时候需要基于上一次请求的响应
数据来发送下一次请求。在这种情况下，这个字段
可以用来提供上次响应与下次请求之间的关联信息。
上次响应中，服务器会通过 Etag 向客户端发送一
个唯一标识，在下次请求中客户端可以通过 IfMatch、If-None-Match、If-Range 字段将这个标识
告知服务器，这样服务器就知道该请求和上次的响
应是相关的。这个字段的功能和 Cookie 是相同的，
但 Cookie 是网景（Netscape）公司自行开发的规格，
而 Etag 是将其进行标准化后的规格

1.1.6 发送请求后会收到响应

HTTP 状态码概要
 状态码的第一位数字表示状态类型，第二、三位数字表示具体的情况。下表列举了
第一位数字的含义。

状态码 含　　义
1xx 告知请求的处理进度和情况
2xx 成功
3xx 表示需要进一步操作
4xx 客户端错误
5xx 服务器错误

由于每条请求消息中只能写 1 个 URI，所以每次只能获取 1 个文件，
如果需要获取多个文件，必须对每个文件单独发送 1 条请求。比如 1 个
网页中包含 3 张图片，那么获取网页加上获取图片，一共需要向 Web 服务
器发送 4 条请求。

1.2 向 DNS 服务器查询 Web 服务器的 IP 地址

1.2.1　IP 地址的基本知识

根据域名查IP地址

(a) IP地址主体的表示方法
10.11.12.13

(b) 采用与IP地址主体相同的格式表示子网掩码的方法
10.11.12.13/255.255.255.0
IP地址主题/子网掩码

(c) 采用网络号比特数来表示子网掩码的方法
10.11.12.13/24
IP地址主体/子网掩码

(d) 表示子网的地址
10.11.12.0/24 --> 主机号部分的比特全部为0，这个地址表示的不是单独的一台计算机，而是代表整个子网

(e) 表示子网内广播的地址
10.11.12.255/24 --> 主机号部分的比特全部为1，这个地址表示的对整个子网的进行广播

1) IP地址 10.1.2.3 -->00001010.00000001.00000010.00000011
2) 子网掩码 255.255.255.0 --> 11111111.11111111.11111111.00000000
网络号 10.1.2 --> 00001010.00000001.00000010
主机号 3 ---> 00000011

IP 地址的主机号
全 0：表示整个子网
全 1：表示向子网上所有设备发送包，即“广播”

1.2.2 域名和 IP 地址并用的理由

现在我们使用的方案是让人来使用名称，让路由器来使用 IP 地 址。为了填补两者之间的障碍，需要有一个机制能够通过名称来查询 IP 地 址，或者通过 IP 地址来查询名称，这样就能够在人和机器双方都不做出牺
牲的前提下完美地解决问题。这个机制就是 DNS

DNS：Domain Name System，域名服务系统。将服务器名称和 IP 地址进行
关联是 DNS 最常见的用法，但 DNS 的功能并不仅限于此，它还可以将邮
件地址和邮件服务器进行关联，以及为各种信息关联相应的名称。

1.2.3 　Socket 库提供查询 IP 地址的功能

Socket 库中包含很多用于发送和接收数据的程序组件

1.2.4 通过解析器向 DNS 服务器发出查询

解析器的程序名称“gethostbyname”以及 Web 服务器
的域名“www.lab.glasscom.com”就可以了，这样就完成了对解析器的调用 B。
<内存地址> = gethostbyname("www.lab.glasscom.com")
gethostbyname = 解析器的程序名
www.lab.glasscom.com = 要查询的服务器的域名

调用解析器后，解析器会向 DNS 服务器发送查询消息，然后 DNS 服
务器会返回响应消息。响应消息中包含查询到的 IP 地址，解析器会取出 IP
地址，并将其写入浏览器指定的内存地址中。

根据域名查询 IP 地址时，浏览器会使用 Socket 库中的解析器

1.2.5 解析器的内部原理

由于调用了其他程序，原本运行的程序进
入暂停状态，而被调用的程序开始运行，这就是“控制流程转移”。



1.3 全世界 DNS 服务器的大接力
1.3.1 DNS 服务器的基本工作

DNS 服务器的基本工作就是接收来自客户端的查询消
息，然后根据消息的内容返回响应。
（a）域名
服务器、邮件服务器（邮件地址中 @ 后面的部分）的名称
（b） Class
在最早设计 DNS 方案时，DNS 在互联网以外的其他网络中的应用
也被考虑到了，而 Class 就是用来识别网络的信息。不过，如今除了
互联网并没有其他的网络了，因此 Class 的值永远是代表互联网的 IN
（c）记录类型
表示域名对应何种类型的记录。例如，当类型为 A 时，表示域名
对应的是 IP 地址；当类型为 MX 时，表示域名对应的是邮件服务
器。对于不同的记录类型，服务器向客户端返回的信息也会不同

查询 www.lab.glasscom.com 这个域名对应的 IP 地址
（a）域名 = www.lab.glasscom.com
（b） Class = IN
（c）记录类型 = A

A 是 Address 的缩写。
MX：Mail eXchange，邮件交换。

DNS 服务器会从域名与 IP 地址的对照表中查找相应的记录，并
返回 IP 地址。

1.3.2 域名的层次结构
比如 www.lab.glasscom.com 这个域名如果按照公司
里的组织结构来说，大概就是“com 事业集团 glasscom 部 lab 科的 www”
这样。其中，相当于一个层级的部分称为域。因此，com 域的下一层是
glasscom 域，再下一层是 lab 域，再下面才是 www 这个名字。

1.3.3 寻找相应的DNS服务器并获取IP地址

根域 DNS 服务器在运营上使用多台服务器来对应一个 IP 地址，因此尽管
IP 地址只有 13 个，但其实服务器的数量是很多的。

客户端计算机从根域开始询问，然后一层一层排查获取IP地址

1.3.4 通过缓存加快DNS 服务器的相应

有时候并不需要从最上级的根域开始查找，因为 DNS 服务器有一
个缓存 A 功能，可以记住之前查询过的域名。如果要查询的域名和相关信息已
经在缓存中，那么就可以直接返回响应，接下来的查询可以从缓存的位置开
始向下进行。相比每次都从根域找起来说，缓存可以减少查询所需的时间。
并且，当要查询的域名不存在时，“不存在”这一响应结果也会被缓
存。这样，当下次查询这个不存在的域名时，也可以快速响应。

DNS 服务器中保存的信息都设置有一个有效期，当缓存中的信息超过有效期后，数
据就会从缓存中删除。而且，在对查询进行响应时，DNS 服务器也会告知客
户端这一响应的结果是来自缓存中还是来自负责管理该域名的 DNS 服务器。


1.4 委托协议栈发送消息
1.4.1 数据收发操作概览

向操作系统内部的协议栈发出委托时，需要按照指定的顺序来调
用 Socket 库中的程序组件

通过 DNS 服务器查询 IP 地址的操作也同样适用于所有网络应用程序。

服务器程序 --> 协议栈（TCP）-->客户端程序
客户端程序 --> 协议栈（TCP）-->客户端程序

服务器一端创建套接字-->服务器进入等待状态-->客户端连接管道

（1）创建套接字（创建套接字阶段）
（2）将管道连接到服务器端的套接字上（连接阶段）
（3）收发数据（通信阶段）
（4）断开管道并删除套接字（断开阶段）

1.4.2 创建套接字阶段
　书中出现了 Socket、socket、套接字（英文也是 socket）等看起来非常容易
混淆的词，其中小写的 socket 表示程序组件的名称，大写字母开头的
Socket 表示库，而汉字的“套接字”则表示管道两端的接口。

描述符识别特定的套接字socket
应用程序是通过“描述符”这一类似号码牌的东西来识别套接字的。

1.4.3 连接阶段：把管道接上去

第 1 个参数，即描述符，就是在创建套接字的时候由协议栈返回的那
个描述符。connect 会将应用程序指定的描述符告知协议栈，然后协议栈根
据这个描述符来判断到底使用哪一个套接字去和服务器端的套接字进行连
接，并执行连接的操作

第 2 个参数，即服务器 IP 地址，就是通过 DNS 服务器查询得到的我
们要访问的服务器的 IP 地址。在 DNS 服务器的部分已经讲过，在进行数
据收发操作时，双方必须知道对方的 IP 地址并告知协议栈。这个参数就是
那个 IP 地址了。

第 3 个参数，即端口号，这个需要稍微解释一下。可能大家会觉得，
IP 地址就像电话号码，只要知道了电话号码不就可以联系到对方了吗？其 实，网络通信和电话还是有区别的，我们先来看一看 IP 地址到底能用来干
什么。IP 地址是为了区分网络中的各个计算机而分配的数值 B。因此，只要
知道了 IP 地址，我们就可以识别出网络上的某台计算机。但是，连接操作
的对象是某个具体的套接字，因此必须要识别到具体的套接字才行，而仅
凭 IP 地址是无法做到这一点的。

准确地说，IP 地址不是分配给每一台设备的，而是分配给设备中安装的网
络硬件的。因此，如果一台设备中安装了多个网络硬件，那么就会有多个
IP 地址。

　端口号的规则是全球统一的，为了避免重复和冲突，端口号和 IP 地址一样
都是由 IANA（Internet Assigned Number Authority，互联网编号管理局）这
一组织来统一管理的。
描述符：应用程序用来识别套接字的机制
IP 地址和端口号：客户端和服务器之间用来识别对方套接字的机制

1.4.4 通信阶段：传递消息

用户输入的
网址生成的 HTTP 请求消息 -->  write
套接字中已经保存了已连接的通信对象的相关信息，所以
只要通过描述符指定套接字，就可以识别出通信对象，并向其发送数据。

1.4.5 断开阶段：收发数据结束
当浏览器收到数据之后，收发数据的过程就结束了。接下来，我们需
要调用 Socket 库的 close 程序组件进入断开阶段
最终，连接在套接字之间的管道会被断开，套接字本身也会被删除


2. 用电信号传输 TCP/IP 数据
--探索协议栈和网卡

下列说法是正确的（√）还是错误的（×）？
1. 我们现在使用的以太网中存在不符合国际标准（IEEE802.3/802.2）
的部分。

√。一般情况下，以太网的头部（网络包开头的控制信息）格
式并非遵循国际标准（IEEE802.3/802.2），而是遵循一个更古
老的规格（以太网第 2 版，又称 DIX 规格），相对地，国际标
准（IEEE802.3/802.2）的头部格式由于长度太长、效率降低
而没有普及。

2. TCP/IP 是由 TCP 和 IP 两个协议的名字组合而成的，最开始
这两个协议是合在一起的。

√。最早的 TCP/IP 协议原型设计相当于现在的 TCP 和 IP 合
在一起的样子，后来才拆分成为 TCP 和 IP 两个协议。


3. 网络包通信技术是 20 世纪 60 年代为用计算机进行数据通信而
设计出来的。

√。在网络包出现之前，通信都是像电话一样把线路连接起来
进行的。但是，连接线路的通信方式只能和固定的对象进行通
信，无法发挥计算机可以处理多种工作的特点。为了解决这个
问题，人们设计出了使用网络包来进行通信的方式。

2.1 创建套接字

TCP = Transmission Control Protocol
ICMP = Internet Control Message Protocol
UDP = User Datagram Protocol
ARP = Address Resolution Protocol
IP = Internet Protocol

网络应用程序 --> 操作系统(负责用 TCP 协议收发数据的部分和负责用 UDP 协议收发数据的部分)
**像浏览器、邮件等一般的应用程序都是使用 TCP 收发数据的，而像 DNS 查询
等收发较短的控制数据的时候则使用 UDP。

浏览器、邮件等一般应用程序收发数据时用 TCP；
DNS 查询等收发较短的控制数据时用 UDP

ICMP 用于告知网络包传送过程中产生的错误以及各种控制消息，ARP 用
于根据 IP 地址查询相应的以太网 MAC 地址

2.1.2 套接字的实体就是通信控制信息

协议栈是根据套接字中记录的控制信息来工作的。

PID：Process ID（进程标识符）的缩写，是操作系统为了标识程序而分配的
编号，使用任务管理器可以查询所对应的程序名称。

2.1.3 调用socket时的操作

创建套接字时，首先分配一个套接字所需的内存空间，然后向其
中写入初始状态。

2.2 连接服务器
2.2.1 连接是什么意思？

连接实际上是通信双方交换控制信息，在套接字中记录这
些必要信息并准备数据收发的一连串操作

所谓控制信息，就是用来控制数据收发操作所需的一些信息，IP 地址
和端口号就是典型的例子。

2.2.2负责保存控制信息的头部

第一类是客户端和服务器相互联络时交换的控制信息。这些信息不仅
连接时需要，包括数据收发和断开连接操作在内，整个通信过程中都需要，
这些内容在 TCP 协议的规格中进行了定义。

以太网头部又称“MAC 头部”。

发送方端口号 16 发送网络包的程序的端口号
接收方端口号 16 网络包的接收方程序的端口号
序号 （发送数据的顺序编号）32 发送方告知接收方该网络包发送的数据相当于所有发送数据的第几个字节
ACK 号（接收数据的顺序编号）32 接收方告知发送方接收方已经收到了所有数据的第几个字节。其中，ACK 是 acknowledge 的缩写
数据偏移量 4 表示数据部分的起始位置，也可以认为表示头部的长度
保留 6 该字段为保留，现在未使用

控制位 6 该字段中的每个比特分别表示以下通信控制含义。
URG：表示紧急指针字段有效
ACK：表示接收数据序号字段有效，一般表示数
据已被接收方收到
PSH：表示通过 flush 操作发送的数据
RST：强制断开连接，用于异常中断的情况
SYN：发送方和接收方相互确认序号，表示连接
操作
FIN：表示断开连接
窗口 16 接收方告知发送方窗口大小（即无需等待确认可一起发送的数据量）
校验和 16 用来检查是否出现错误
紧急指针 16 表示应紧急处理的数据位置
可选字段 可变长度除了上面的固定头部字段之外，还可以添加可选
        字段，但除了连接操作之外，很少使用可选字段

控制信息还有另外一类，那就是保存在套接字中，用来控制协议栈操
作的信息 A。应用程序传递来的信息以及从通信对象接收到的信息都会保存
在这里，还有收发数据操作的执行状态等信息也会保存在这里，协议栈会
根据这些信息来执行每一步的操作。

通信操作中使用的控制信息分为两类。
（1） 头部中记录的信息
（2） 套接字（协议栈中的内存空间）中记录的信息

2.2.3 连接操作的实际过程

connect（< 描述符 >, < 服务器 IP 地址和端口号 >, …）

连接操作的第一步是在 TCP 模块处创建表示连接控制信息的头部。
通过 TCP 头部中的发送方和接收方端口号可以找到要连接的套
接字。

2.3 收发数据
2.3.1  将HTTP请求交给协议栈

一次将多少数据交给协议栈
是由应用程序自行决定的，协议栈并不能控制这一行为

MTU：一个网络包的最大长度，以太网中一般为 1500 字节。
MSS：除去头部之后，一个网络包所能容纳的 TCP 数据的最大
长度

MTU：Maximum Transmission Unit，最大传输单元

MSS：Maximum Segment Size，最大分段大小。 TCP 和 IP 的头部加起来一
般是 40 字节，因此 MTU 减去这个长度就是 MSS。例如，在以太网中，
MTU 为 1500，因此 MSS 就 是 1460。TCP/IP 可以使用一些可选参数
（protocol option），如加密等，这时头部的长度会增加，那么 MSS 就会随
着头部长度增加而相应缩短。

FCS：Frame Check Sequence，帧校验序列

2.3.2 对较大的数据进行拆分

HTTP 请求消息一般不会很长，一个网络包就能装得下，但如果其中
要提交表单数据，长度就可能超过一个网络包所能容纳的数据量，比如在
博客或者论坛上发表一篇长文就属于这种情况。

2.3.3 使用ACK号确认网络包已收到

网卡、集线器、路由器都没有错误补偿机制，一旦检测到错误
就直接丢弃相应的包。应用程序也是一样，因为采用 TCP 传输，即便发生
一些错误对方最终也能够收到正确的数据，所以应用程序只管自顾自地发
送这些数据就好了。不过，如果发生网络中断、服务器宕机等问题，那么
无论 TCP 怎样重传都不管用。这种情况下，无论如何尝试都是徒劳，因 此 
TCP 会在尝试几次重传无效之后强制结束通信，并向应用程序报错。

通过“序号”和“ACK 号”可以确认接收方是否收到了网络包。

2.3.4 根据网络包平均往返时间调整ACK号等待时间

ACK 号的等待时间（这个等待时间叫超时时间）。

正因为波动如此之大，所以将等待时间设置为一个固定值并不是一个
好办法。因此，TCP 采用了动态调整等待时间的方法，这个等待时间是
根据 ACK 号返回所需的时间来判断的。具体来说，TCP 会在发送数据
的过程中持续测量 ACK 号的返回时间，如果 ACK 号返回变慢，则相应
延长等待时间；相对地，如果 ACK 号马上就能返回，则相应缩短等待
时间

如果某一个包被重复发送多次，接收方可以根据序号判断出这个包是重复
的，因此并不会造成网络异常。

2.3.5 使用窗口有效管理ACK号
滑动窗口方式

提前预知接收方可以知道的接受容量大小，利用好等待的时间发送数据包等待相应，
当达到临界值时暂停，等待回传.

2.3.6 ACK 与窗口的合并

更新窗口大小的时机应该是接收方从缓冲区中取出数据传递给
应用程序的时候。这个操作是接收方应用程序发出请求时才会进行的，而
发送方不知道什么时候会进行这样的操作，因此当接收方将数据传递给应
用程序，导致接收缓冲区剩余容量增加时，就需要告知发送方，这就是更
新窗口大小的时机。

2.3.7 接收HTTP响应消息

随着控制流程转移，应用程序也会进入暂停状态。

首先，协议栈会检查收到的数据块和 TCP 头
部的内容，判断是否有数据丢失，如果没有问题则返回 ACK 号。然后，
协议栈将数据块暂存到接收缓冲区中，并将数据块按顺序连接起来还原出
原始的数据，最后将数据交给应用程序。具体来说，协议栈会将接收到的
数据复制到应用程序指定的内存地址中，然后将控制流程交回应用程序。
将数据交给应用程序之后，协议栈还需要找到合适的时机向发送方发送窗
口更新

2.4 从服务器断开并删除套接字
2.4.1 数据发送完毕后断开连接

首先，服务器一方的应用程序会
调用 Socket 库的 close 程序。然后，服务器的协议栈会生成包含断开信息
的 TCP 头部，具体来说就是将控制位中的 FIN 比特设为 1。接下来，协议
栈会委托 IP 模块向客户端发送数据。同时，服务器的套接字
中也会记录下断开操作的相关信息。

当收到服务器发来的 FIN 为 1 的 TCP 头部时，
客户端的协议栈会将自己的套接字标记为进入断开操作状态。然后，为
了告知服务器已收到 FIN 为 1 的包，客户端会向服务器返回一个 ACK 号 
这些操作完成后，协议栈就可以等待应用程序来取数据了。

根据规则，服务器返回请求之后，Web 通信操作就全部
结束了，因此只要收到服务器返回的所有数据，客户端的操作也就随之结
束了

2.4.2 删除套接字

和服务器的通信结束之后，用来通信的套接字也就不会再使用了，这
时我们就可以删除这个套接字了。不过，套接字并不会立即被删除，而是
会等待一段时间之后再被删除

2.4.3 数据收发操作小结

N/A

2.5 IP与以太网的包收发操作
2.5.1 包的基本知识

TCP 模块在执行连接、收发、断开等各阶段操作时，都需要委托 IP 模
块将数据封装成包发送给通信对象。

头部包含目的
地址等控制信息，大家可以把它理解为快递包裹的面单；头部后面就是委
托方要发送给对方的数据，也就相当于快递包裹里的货物。

当到达最近的转发设备之后，转发设备会根据头部
中的信息判断接下来应该发往哪里。这个过程需要用到一张表，这张表里
面记录了每一个地址对应的发送方向，也就是按照头部里记录的目的地址
在表里进行查询，并根据查到的信息判断接下来应该发往哪个方向。

（1）路由器根据目标地址判断下一个路由器的位置
（2）集线器在子网中将网络包传输到下一个路由

（1）IP 协议根据目标地址判断下一个 IP 转发设备的位置
（2）子网中的以太网协议将包传输到下一个转发设备

2.5.2 包收发操作概览

IP 模块负责添加如下两个头部。
（1） MAC 头部：以太网用的头部，包含 MAC 地址
（2） IP 头部：IP 用的头部，包含 IP 地址

无论要收发的包是控制包还是数据包，IP 对各种类型的包的收
发操作都是相同的

2.5.3 生成包含接收方IP地址的IP头部

版本号 4 IP 协议版本号，目前使用的是版本 4
头部长度（IHL） 4 IP 头部的长度。可选字段可导致头部长度变化，
因此这里需要指定头部的长度
服务类型（ToS） 8 表示包传输优先级。最初的协议规格里对这个参
数的规定很模糊，最近 DiffServ 规格重新定义了
这个字段的用法
总长度 16 表示 IP 消息的总长度
ID 号 16 用于识别包的编号，一般为包的序列号。如果一
个包被 IP 分片，则所有分片都拥有相同的 ID
标志（Flag） 3 该字段有 3 个比特，其中 2 个比特有效，分别代
表是否允许分片，以及当前包是否为分片包
分片偏移量 13 表示当前包的内容为整个 IP 消息的第几个字节
开始的内容
生存时间（TTL） 8 表示包的生存时间，这是为了避免网络出现回环
时一个包永远在网络中打转。每经过一个路由器，
这个值就会减 1，减到 0 时这个包就会被丢弃
协议号 8 协议号表示协议的类型（以下均为十六进制）。
TCP: 06
UDP: 11
ICMP: 01
头部校验和 16 用于检查错误，现在已不使用
发送方 IP 地址 32 网络包发送方的 IP 地址
接收方 IP 地址 32 网络包接收方的 IP 地址
可选字段 可变长度 除了上面的头部字段之外，还可以添加可选字段
用于记录其他控制信息，但可选字段很少使用

IP 地址实际上并不是分配给计算机的，而是分配给
网卡的，因此当计算机上存在多块网卡时，每一块网卡都会有自己的 IP 地 址。

IP 头部的“接收方 IP 地址”填写通信对象的 IP 地址。
发送方 IP 地址需要判断发送所使用的网卡，并填写该网卡的 IP
地址

2.5.4 生成以太网用的MAC头部

接收方 MAC 地址 48 网络包接收方的 MAC 地址，在局域网中
使用这一地址来传输网络包
发送方 MAC 地址 48 网络包发送方的 MAC 地址，接收方通过
它来判断是谁发送了这个包
以太类型 16 使用的协议类型。下面是一些常见的类型，
一般在 TCP/IP 通信中只使用 0800 和 0806
这两种。
0000-05DC：IEEE 802.3
0800　　 ：IP 协议
0806　 ：ARP 协议
86DD　　　 IPv6

IP 地址是类似多少弄多少号这种现实中地址的层
次化的结构，而 MAC 地址中的 48 比特可以看作是一个整体。

IP 模块根据路由表 Gateway 栏的内容判断应该把包发送给谁

2.5.5 通过ARP查询目标路由器的MAC地址

ARP：Address Resolution Protocol，地址解析协议。

查询 MAC 地址需要使用 ARP

2.5.6 以太网的基本知识
N/a

2.5.7 将IP包转换成电或光信号

IP 生成的网络包只是存放在内存中
的一串数字信息，没有办法直接发送给对方。因此，我们需要将数字信息
转换为电或光信号，才能在网线上传输，也就是说，这才是真正的数据发
送过程

Media Access Control 的缩写。MAC 头部、MAC 地址中的 MAC 也
是这个意思。也就是说，通过 MAC 模块控制包收发操作时所使用的头部
和地址就叫作 MAC 头部和 MAC 地址。

网卡的 ROM 中保存着全世界唯一的 MAC 地址，这是在生产网
卡时写入的

网卡中保存的 MAC 地址会由网卡驱动程序读取并分配给 MAC
模块

2.5.8 给网络包再加3个控制数据
N/a

2.5.9 向集线器发送网络包
发送信号的操作分为两种，一种是使用集线器的半双工
模式，另一种是使用交换机的全双工 模式

CRC：Cyclic Redundancy Check，循环冗余校验

发送和接收同时并行的方式叫作“全双工”，相对地，某一时刻只能进行
发送或接收其中一种操作的叫作“半双工”。

根据以太网信号方式的不同，有些地方叫 MAU（Medium Attachment Unit，
介质连接单元），有些地方叫 PHY（Physical Layer Device，物理层装置）。
在速率为 100 Mbit/s 以上的以太网中都叫 PHY。

网卡的 MAC 模块生成通用信号，然后由 PHY（MAU）模块转换
成可在网线中传输的格式，并通过网线发送出去。

在使用集线器的半双工模式中，一旦发生这种情况，两组信号就会相
互叠加，无法彼此区分出来，这就是所谓的信号碰撞。

2.5.10　接收返回包

一台设备发送的信号会到达连
接在集线器上的所有设备。这意味着无论是不是发给自己的信号都会通过
接收线路传进来，因此接收操作的第一步就是不管三七二十一把这些信号
全都收进来再说。

2.5.11　将服务器的响应包从 IP 传递给 TCP

服务器返回的包的以太类型应该是 0800，因此网卡驱动会将其
交给 TCP/IP 协议栈来进行处理。接下来就轮到 IP 模块先开始工作了，第
一步是检查 IP 头部，确认格式是否正确。如果格式没有问题，下一步就是
查看接收方 IP 地址。如果接收网络包的设备是一台 Windows 客户端计算
机，那么服务器返回的包的接收方 IP 地址应该与客户端网卡的地址一致，
检查确认之后我们就可以接收这个包了。

Echo reply 0 响应 Echo 消息
Destination 
unreachable
3 出于某些原因包没有到达目的地而是被丢弃，则通过此消
息通知发送方。可能的原因包括目标 IP 地址在路由表中
不存在；目标端口号不存在对应的套接字；需要分片，但
分片被禁用
Source quench 4 当发送的包数量超过路由器的转发能力时，超过的部分会
被丢弃，这时会通过这一消息通知发送方。但是，并不是
说遇到这种情况一定会发送这一消息。当路由器的性能不
足时，可能连这条消息都不发送，就直接把多余的包丢弃
了。当发送方收到这条消息时，必须降低发送速率
Redirect 5 当查询路由表后判断该包的入口和出口为同一个网络接口
时，则表示这个包不需要该路由器转发，可以由发送方直
接发送给下一个路由器。遇到这种情况时，路由器会发送
这条消息，给出下一个路由器的 IP 地址，指示发送方直
接发送过去
Echo 8 ping 命令发送的消息。收到这条消息的设备需返回一个
Echo reply 消息，以便确认通信对象是否存在
Time exceeded 11 由于超过了 IP 头部中的 TTL 字段表示的存活时间而被路
由器丢弃，此时路由器会向发送方发送这条消息
Parameter 
problem
12 由于 IP 头部字段存在错误而被丢弃，此时会向发送方发
送这条消息

2.6 UDP 协议的收发操作

2.6.1　不需要重发的数据用 UDP 发送更高效

在某种情况下，即便没有 TCP 这样复杂的机制，我们也能够高
效地重发数据，这种情况就是数据很短，用一个包就能装得下。如果只有
一个包，就不用考虑哪个包未送达了，因为全部重发也只不过是重发一个
包而已，这种情况下我们就不需要 TCP 这样复杂的机制了。

2.6.2　控制用的短数据

像 DNS 查询等交换控制信息的操作基本
上都可以在一个包的大小范围内解决，这种场景中就可以用 UDP 来代替
TCPA。

UDP 头部中的控制信息
发送方端口号 16 网络包发送方的端口号
接收方端口号 16 网络包接收方的端口号
数据长度 16 UDP 头部后面数据的长度
校验和 16 用于校验错误

2.6.3　音频和视频数据

在这些无需重发数据，或者是重发了也没什么意义的情况下，使用
UDP 发送数据的效率会更高。

UDP 经常会被防火墙阻止，因此当需要穿越防火墙传输音频和视频数据
时，尽管需要消耗额外的带宽，但有时候也只能使用 TCP。

3.从网线到网络设备
3.1 信号在网线和集线器中传输

3.1.1 每个包都是独立传输的

所有的包在传输到目的地的过程中都是独立
的，相互之间没有任何关联。

3.1.2　防止网线中的信号衰减很重要

PHY（MAU）：以太网有多重派生方式，每种方式中信号收发模块的名称都
不一样。现在 100 Mbit/s 以上的以太网中叫作 PHY（物理层装置），以前低
速方式中则叫作 MAU（介质连接单元）。

局域网网线使用的是双绞线，其中“双绞”的意思就是以两根信号线
为一组缠绕在一起，这种拧麻花一样的设计是为了抑制噪声的影响。

3.1.4　集线器将信号发往所有线路

集线器将信号发送给所有连接在它上面的线路。

3.2 交换机的包转发操作

3.2.1 交换机根据地址表进行转发
换句话说，如果在计算机上安装多块网卡，并开启“混杂模式”让网卡接
收所有的网络包，然后再安装一个和交换机具备同样功能的网络包转发软
件，那么这台计算机就变成了一台交换机。

交换机端口的 MAC 模块不具有 MAC 地址

交换机根据 MAC 地址表查找 MAC 地址，然后将信号发送到相
应的端口

第一种是收到包时，将发送方 MAC 地址以及其输入端口的号码写入
MAC 地址表中。由于收到包的那个端口就连接着发送这个包的设备，所以
只要将这个包的发送方 MAC 地址写入地址表，以后当收到发往这个地址
的包时，交换机就可以将它转发到正确的端口了。交换机每次收到包时都
会执行这个操作，因此只要某个设备发送过网络包，它的 MAC 地址就会
被记录到地址表中。

3.2.3 特殊操作
地址表中找不到指定的 MAC 地址。这
可能是因为具有该地址的设备还没有向交换机发送过包，或者这个设备一
段时间没有工作导致地址被从地址表中删除了。这种情况下，交换机无法
判断应该把包转发到哪个端口，只能将包转发到除了源端口之外的所有端
口上，无论该设备连接在哪个端口上都能收到这个包。这样做不会产生什
么问题，因为以太网的设计本来就是将包发送到整个网络的，然后只有相
应的接收者才接收包，而其他设备则会忽略这个包。

3.2.4　全双工模式可以同时进行发送和接收
广播地址（broadcast address）是一种特殊的地址，将广播地址设为接收方
地址时，包会发送到网络中所有的设备。MAC 地址中的 FF:FF:FF:FF:FF:FF
和 IP 地址中的 255.255.255.255 都是广播地址。

交换机的全双工模式可以同时发送和接收信号

3.2.5　自动协商：确定最优的传输速率
na

3.2.6　交换机可同时执行多个转发操作

交换机只将包转发到具有特定 MAC 地址的设备连接的端口，其他端
口都是空闲的。如图 3.7 中的例子所示，当包从最上面的端口发送到最下
面的端口时，其他端口都处于空闲状态，这些端口可以传输其他的包，因
此交换机可以同时转发多个包。
相对地，集线器会将输入的信号广播到所有的端口，如果同时输入多
个信号就会发生碰撞，无法同时传输多路信号，因此从设备整体的转发能
力来看，交换机要高于集线器。