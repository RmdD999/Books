Charpter 1: Breaking the Surface- a quick dip

Running a program means telling the Java Virtual Machine(JVM) to "Load the class",
then start executing its main() method, Keep running til all the code in main is 
finished.

Why does everything have to be in classes?
Java is an object-oriented language.

Do I have to put a main in every class I write?
No, only need one for the main method for the project start.

In my other language I can do a boolean test on an integer.
In Java can I say something like:
    int x = 1;
    while(x){}

No. A boolean and an integer are not compatible types in Java.

Charpter 2: A Trip to Objectville

Overriding just means that a subclass redefines one of its inherited
methods when it needs to change or extend the behavior of that method.

Things an object knows about itself are called -- instance variables
Things an object can do are called -- methods

A class is a blueprint for an object

The two uses of main:
to test your real class
to launch/start your Java application

ß Object-oriented programming lets you extend 
a program without having to touch previouslytested, working code.
ß All Java code is defined in a class. 
ß A class describes how to make an object of 
that class type. A class is like a blueprint.
ß An object can take care of itself; you don’t 
have to know or care how the object does it.
ß An object knows things and does things.
ß Things an object knows about itself are called 
instance variables. They represent the state 
of an object.
ß Things an object does are called methods. 
They represent the behavior of an object.
ß When you create a class, you may also want 
to create a separate test class which you’ll 
use to create objects of your new class type.
ß A class can inherit instance variables and 
methods from a more abstract superclass. ß At runtime, a Java program is nothing more 
than objects ‘talking’ to other objects.


I am compiled from a .java file --->Class


Chapter 3 Primitives and references

Primitives hold 
fundamental values (think: simple bit patterns) 
including integers, booleans, and floating point 
numbers.

Object references hold, well, references
to objects (gee, didn’t that clear it up.)

variables must have a type
variables must have a name

A variable is just a cup. A container. It holds something.

■ It must start with a letter, underscore (_), or 
dollar sign ($). You can’t start a name with a 
number.
■ After the fi rst character, you can use numbers as 
well. Just don’t start it with a number.
■ It can be anything you like, subject to those two 
rules, just so long as it isn’t one of Java’s reserved 
words.

The eight primitive types are: boolean char byte short int long float double And here’s a mnemonic for remembering them: Be Careful! Bears Shouldn’t Ingest Large Furry Dogs If you make up your own, it’ll stick even better

■ There is actually no such thing as an object variable.
■ There’s only an object reference variable.
■ An object reference variable holds bits that represent a 
way to access an object.
■ It doesn’t hold the object itself, but it holds something 
like a pointer. Or an address. Except, in Java we don’t 
really know what is inside a reference variable. We do 
know that whatever it is, it represents one and only one 
object. And the JVM knows how to use the reference to 
get to the object.

Although a primitive variable is full of 
bits representing the actual value of the 
variable, an object reference variable is full 
of bits representing a way to get to the 
object.

ß Variables come in two flavors: primitive and 
reference.
ß Variables must always be declared with a name 
and a type. 
ß A primitive variable value is the bits representing 
the value (5, ‘a’, true, 3.1416, etc.).
ß A reference variable value is the bits 
representing a way to get to an object on the 
heap.
ß A reference variable is like a remote control. 
Using the dot operator (.) on a reference 
variable is like pressing a button on the remote 
control to access a method or instance variable.
ß A reference variable has a value of null when 
it is not referencing any object.
ß An array is always an object, even if the array 
is declared to hold primitives. There is no such 
thing as a primitive array, only an array that 
holds primitives.


Charpter 4 -- methods use instance variables

State affects behavior, behavior affects state.

A method uses parameters. A caller passes arguments.

Methods can return values. Every method is declared with a return 
type, but until now we’ve made all of our methods with a void
return type, which means they don’t give anything back.

ß Classes define what an object knows and what an 
object does.
ß Things an object knows are its instance variables 
(state). 
ß Things an object does are its methods (behavior). 
ß Methods can use instance variables so that objects 
of the same type can behave differently. 
ß A method can have parameters, which means you 
can pass one or more values in to the method. 
ß The number and type of values you pass in must 
match the order and type of the parameters 
declared by the method.
ß Values passed in and out of methods can be 
implicitly promoted to a larger type or explicitly cast 
to a smaller type.
ß The value you pass as an argument to a method 
can be a literal value (2, ‘c’, etc.) or a variable of 
the declared parameter type (for example, x where 
x is an int variable). (There are other things you 
can pass as arguments, but we’re not there yet.)
ß A method must declare a return type. A void return 
type means the method doesn’t return anything.
ß If a method declares a non-void return type, it must 
return a value compatible with the declared return 
type.