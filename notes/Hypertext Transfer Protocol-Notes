1.3 Terminology

Connection: A transport layer virtual circuit estabilished between two programs for the purpose of communication

Message: The basic unit of HTTP communication, consisting of a structured sequence of octets matching the syntax
         and transmitted via the Connection

Request： An HTTP request message.

Response: An HTTP response message.

Resource: A network data object or service that can be identified by a URI. Resources may be available in multiple
          representations or vary in other ways.

Entity:   The information transferred as the payload of a request or response, An entity consists of       
metainformation in the form of entity-header and content in the form of an entity-body.

Representation: An entity included with a response that is subject to content negotiation, 
                There may exist multiple representations associated with a particular response status

Content negotiation: The mechanism for selecting the appropriate representation when servicing a request.
                     The representation of entities in any response can be negotiated (including error responses)

Variant: A resource may have one, or more than one, representation(s) associated with it at any given instant. Each
         of these representations is termed a 'variant'. Use of the term 'variant' does not necessarily imply that 
         the resource is subject to content negotiation.
        
Client: A program that establishes connections for the purpose of sending requests.

User agent: The client which initiates a request. These are often browsers, editors, spiders(web-travering robots)
            or other end user tools.

Server: An application program that accepts connections in order to service requests by sending back responses, Any
        given program may be capable of being both a client and a server, our use of these terms refers only to the
        role being performed by the program for a particular connection, rather than to the program's capabilities
        in general. Likewise, any server may act as an origin server, proxy, gateway, or tunnel, switching behavior
        based on the nature of each request.

origin server: The server on which a given resource resides or is to be created.

Proxy
An intermediary program which acts as both a server and a client for the purpose of making requests on behalf
of other clients. Requests are serviced internally or by passing them on, with possible translation, to other
servers. A proxy MUST implement both the client and server requirements of this specification. A “transparent
proxy” is a proxy that does not modify the request or response beyond what is required for proxy authentication
and identification. A “non-transparent proxy” is a proxy that modifies the request or response in order to provide
some added service to the user agent, such as group annotation services, media type transformation, protocol
reduction, or anonymity filtering. Except where either transparent or non-transparent behavior is explicitly
stated, the HTTP proxy requirements apply to both types of proxies.

gateway
A server which acts as an intermediary for some other server. Unlike a proxy, a gateway receives requests as if it
were the origin server for the requested resource; the requesting client may not be aware that it is
communicating with a gateway.

tunnel
An intermediary program which is acting as a blind relay between two connections. Once active, a tunnel is not
considered a party to the HTTP communication, though the tunnel may have been initiated by an HTTP request.
The tunnel ceases to exist when both ends of the relayed connections are closed.

cache
A program’s local store of response messages and the subsystem that controls its message storage, retrieval, and
deletion. A cache stores cacheable responses in order to reduce the response time and network bandwidth
consumption on future, equivalent requests. Any client or server may include a cache, though a cache cannot be
used by a server that is acting as a tunnel.

cacheable
A response is cacheable if a cache is allowed to store a copy of the response message for use in answering
subsequent requests. The rules for determining the cacheability of HTTP responses are defined in section 13.
Even if a resource is cacheable, there may be additional constraints on whether a cache can use the cached copy
for a particular request.

first-hand
A response is first-hand if it comes directly and without unnecessary delay from the origin server, perhaps via
one or more proxies. A response is also first-hand if its validity has just been checked directly with the origin
server.

explicit expiration time
The time at which the origin server intends that an entity should no longer be returned by a cache without further
validation.

heuristic expiration time
An expiration time assigned by a cache when no explicit expiration time is available.

age
The age of a response is the time since it was sent by, or successfully validated with, the origin server.

freshness lifetime
The length of time between the generation of a response and its expiration time.

fresh
A response is fresh if its age has not yet exceeded its freshness lifetime

stale
A response is stale if its age has passed its freshness lifetime.

semantically transparent
A cache behaves in a “semantically transparent” manner, with respect to a particular response, when its use
affects neither the requesting client nor the origin server, except to improve performance. When a cache is
semantically transparent, the client receives exactly the same response (except for hop-by-hop headers) that it
would have received had its request been handled directly by the origin server.

validator
A protocol element (e.g., an entity tag or a Last-Modified time) that is used to find out whether a cache entry is
an equivalent copy of an entity

upstream/downstream
Upstream and downstream describe the flow of a message: all messages flow from upstream to downstream.

inbound/outbound
Inbound and outbound refer to the request and response paths for messages: “inbound” means “traveling toward
the origin server”, and “outbound” means “traveling toward the user agent”

1.4 Overall Operation
HTTP-> request/response protocol
client->send request(URI)->server

Simple case: UA->user agent  v->connection O->origin server
request chain ------------------------>
 UA -------------------v------------------- O
 <----------------------- response chain